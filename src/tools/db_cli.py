import typer
from rich import print as rprint
import asyncio # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from typing import Union
from src.config.database import DatabaseConfig
from src.services.database_service import DatabaseService         # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
from src.services.database_service_async import AsyncDatabaseService # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
from src.utils.console_printer import print_message             # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–æ–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
app = typer.Typer(add_completion=False, help="üìö –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

def _get_configured_service(async_mode: bool) -> Union[DatabaseService, AsyncDatabaseService]:
    cfg = DatabaseConfig.from_env()
    # –í–∞–∂–Ω–æ: –í CLI-—É—Ç–∏–ª–∏—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—é—Ç –¥–∞–Ω–Ω—ã–µ,
    # –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Å—Ö–µ–º—É.
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —è–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π CLI-–º–µ—Ç–æ–¥).
    if async_mode:
        # –î–ª—è AsyncDatabaseService —Å—Ö–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ `setup_schema`
        return AsyncDatabaseService(db_config=cfg)
    else:
        # –î–ª—è DatabaseService, –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥–∏ —è–≤–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        return DatabaseService(db_config=cfg, create_schema_on_init=False, drop_all_on_init=False)

@app.command(name="show-db") # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
def show_db(
    rows: int = typer.Option(3, help="–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø—Ä–µ–≤—å—é –≤—ã–≤–æ–¥–∏—Ç—å"),
    headers_only: bool = typer.Option(False, "--headers", help="–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏"),
    async_mode: bool = typer.Option(False, "--async", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async-–∫–ª–∏–µ–Ω—Ç"),
):
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).
    """
    if async_mode:
        async def _run_async_show():
            service = _get_configured_service(async_mode=True)
            print_message("Async connection OK!", style="bold blue")
            await service.print_database_overview(preview_rows=rows, headers_only=headers_only)
        asyncio.run(_run_async_show())
    else:
        service = _get_configured_service(async_mode=False)
        service.print_database_overview(preview_rows=rows, headers_only=headers_only)

@app.command(name="list-tables") # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
def list_tables(async_mode: bool = typer.Option(False, "--async", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async-–∫–ª–∏–µ–Ω—Ç")):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø—Ä–µ–≤—å—é.
    """
    if async_mode:
        async def _run_async_list_tables():
            service = _get_configured_service(async_mode=True)
            table_names = await service.get_table_names()
            for t in table_names:
                rprint(f"‚Ä¢ [cyan]{t}[/cyan]")
        asyncio.run(_run_async_list_tables())
    else:
        service = _get_configured_service(async_mode=False)
        for t in service.get_table_names():
            rprint(f"‚Ä¢ [cyan]{t}[/cyan]")

@app.command(name="init-schema")
def init_schema(
    drop_first: bool = typer.Option(False, "--drop-first", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º"),
    async_mode: bool = typer.Option(False, "--async", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async-–∫–ª–∏–µ–Ω—Ç"),
):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã).
    """
    cfg = DatabaseConfig.from_env()
    if async_mode:
        async def _run_async_init_schema():
            service = AsyncDatabaseService(db_config=cfg)
            await service.setup_schema(create_schema=True, drop_all_first=drop_first)
            print_message("Async schema setup complete!", style="bold green")
        asyncio.run(_run_async_init_schema())
    else:
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä DatabaseService.
        # –û–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ create_all_tables/drop_all_tables –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è.
        service = DatabaseService(
            db_config=cfg,
            create_schema_on_init=True,   # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É
            drop_all_on_init=drop_first   # –ü–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ drop_first
        )
        print_message("Sync schema setup complete!", style="bold green")
@app.command(name="create-user") # <--- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê
def create_db_user(
    username: str = typer.Argument(..., help="–ò–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª–∏) –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."),
    password: str = typer.Option(..., prompt=True, hide_input=True, help="–ü–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ."),
    async_mode: bool = typer.Option(False, "--async", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."),
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∞–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ.
    –í–∞–∂–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å
    –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (CREATEROLE, GRANT) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    cfg = DatabaseConfig.from_env()
    if async_mode:
        async def _run_async_create_user():
            service = AsyncDatabaseService(db_config=cfg)
            # setup_schema –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç.–∫. –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Å—Ö–µ–º—É.
            await service.create_read_only_db_user(username, password)
        asyncio.run(_run_async_create_user())
    else:
        service = DatabaseService(db_config=cfg, create_schema_on_init=False, drop_all_on_init=False)
        service.create_read_only_db_user(username, password)

if __name__ == "__main__":
    app()